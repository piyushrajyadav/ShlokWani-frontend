
// ========== Full Adder using Half Adders (Structural) ==========

module half_adder(a, b, sum, carry);
  input a, b;
  output sum, carry;
  assign sum = a ^ b;
  assign carry = a & b;
endmodule

module full_adder_ha(a, b, cin, sum, cout);
  input a, b, cin;
  output sum, cout;
  wire s1, c1, c2;

  half_adder ha1(a, b, s1, c1);
  half_adder ha2(s1, cin, sum, c2);
  assign cout = c1 | c2;
endmodule

// ========== Testbench for Full Adder ==========

module tb_full_adder_ha;
  reg a, b, cin;
  wire sum, cout;

  full_adder_ha uut(a, b, cin, sum, cout);

  initial begin
    $monitor("a=%b b=%b cin=%b => sum=%b cout=%b", a, b, cin, sum, cout);
    a = 0; b = 0; cin = 0;
    #10 a = 0; b = 1; cin = 0;
    #10 a = 1; b = 0; cin = 0;
    #10 a = 1; b = 1; cin = 0;
    #10 a = 0; b = 0; cin = 1;
    #10 a = 0; b = 1; cin = 1;
    #10 a = 1; b = 0; cin = 1;
    #10 a = 1; b = 1; cin = 1;
  end
endmodule

// ========== 4-bit Parallel Adder using Full Adders (Structural) ==========

module parallel_adder_4bit_struct(a, b, sum, cout);
  input [3:0] a, b;
  output [3:0] sum;
  output cout;
  wire c1, c2, c3;

  full_adder_ha fa0(a[0], b[0], 1'b0, sum[0], c1);
  full_adder_ha fa1(a[1], b[1], c1, sum[1], c2);
  full_adder_ha fa2(a[2], b[2], c2, sum[2], c3);
  full_adder_ha fa3(a[3], b[3], c3, sum[3], cout);
endmodule

// ========== Testbench for 4-bit Parallel Adder ==========

module tb_parallel_adder_4bit_struct;
  reg [3:0] a, b;
  wire [3:0] sum;
  wire cout;

  parallel_adder_4bit_struct uut(a, b, sum, cout);

  initial begin
    $monitor("a=%d b=%d => sum=%d cout=%b", a, b, sum, cout);
    a = 4'b0001; b = 4'b0010;
    #10 a = 4'b0101; b = 4'b0110;
    #10 a = 4'b1111; b = 4'b0001;
    #10 a = 4'b1010; b = 4'b0101;
  end
endmodule
